// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your preferred database
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  role          String       @default("USER")
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  testimonials  Testimonial[]
  faqs          FAQ[]
  clients       Client[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  imageUrl     String
  projectUrl  String
  shortDescription String? 
  techStack       String[] // (e.g., "Nextjs", "Reactjs", "Tailwindcss")
  category        String?   // (e.g., "Web App", "Mobile", "Open Source")
  featured       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, name])
}

model Testimonial {
  id         String   @id @default(cuid())
  name       String
  company    String
  role       String?
  quote      String
  positionY  Float?
  imageUrl      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, company])
}

model FAQ {
  id         String   @id @default(cuid())
  question   String
  answer     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Client {
  id           String   @id @default(cuid())
  name         String
  contactEmail String
  phone        String?
  website      String?
  clientSince  DateTime?
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, contactEmail])
}

// NextAuth required models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
